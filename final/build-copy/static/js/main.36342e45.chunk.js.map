{"version":3,"sources":["ElfHeader.js","RadioLocal.js","RadioRemote.js","App.js","serviceWorker.js","index.js"],"names":["ElfHeader","react_default","a","createElement","className","Component","RadioLocal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","runScript","path","script","that","assertThisInitialized","fetch","then","response","json","console","log","allData","result","code","error","info","regex1","RegExp","array1","exec","concat","setState","catch","ex","handleChange","event","selectedValue","target","value","endPointIndex","getAttribute","objectSpread","state","handleSubmit","preventDefault","Uptime","dataEndPoints","uptime","radioLocal","onSubmit","type","name","data-endpoint","id","onChange","htmlFor","RadioRemote","JSON","stringify","handleSubmitRemote","radioRemote","App","src_ElfHeader","src_RadioLocal","src_RadioRemote","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36342e45.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass ElfHeader extends Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <header>\n                    <h1>System Check</h1>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default ElfHeader;","import React, { Component } from 'react';\nimport './App.css';\n\n\nclass RadioLocal extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.dataEndPoints = [\n        '/script-pusher/run-script?script=', \n        '/script-pusher/run-system-tool?script=',\n        '/script-pusher/run-uptime-tool?script=',\n        '/script-pusher/get-hostname?script=',\n        ];\n        \n        this.state = {\n            allData:'',\n            uptime: '',\n            selectedValue: '',\n            endPointIndex: 0\n            \n        };\n    }\n\n\n        \nrunScript = (path, script) => {\n    const that = this;\n    if (!script) {\n        return;\n    }\n    fetch(path + script)\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (json) {\n            console.log('allData', json.allData);\n            console.log('result', json.result);\n            console.log('code', json.code);\n            console.log('error', json.error);\n            let info = '';\n            if (json.result === 'error') {\n                info = json.error;\n            } else if (script === 'CpuInfo') {\n                var regex1 = RegExp('model name.*', 'g');\n                let array1 = regex1.exec(json.allData);\n                while (array1 !== null) {\n                    info += array1[0] + '\\n';\n                    console.log(`Found ${array1[0]}.`);\n                    array1 = regex1.exec(json.allData);\n                }\n            } else { info = json.allData;}\n            that.setState({allData: info});\n        })\n        .catch(function (ex) {\n            console.log('parsing failed, URL bad, network down, or similar', ex);\n        });\n};\n\n\nhandleChange = (event) => {\n    const selectedValue = event.target.value;\n    const endPointIndex = event.target.getAttribute('data-endpoint');\n    console.log('HANDLE CHANGE', selectedValue);\n    this.setState({...this.state, selectedValue: selectedValue, endPointIndex: endPointIndex});\n\n};\n\nhandleSubmit = (event) => {\n    this.setState({allData: ''});\n    console.log('A name was submitted: ', this.state);\n            //uptime console\n     if(this.state.selectedValue === 'uptime'){\n            console.log('Going to console');\n            event.preventDefault();\n        } \n           if(this.state.selectedValue === 'uptime1'){\n          console.log('Going to ssh');\n          this.Uptime();\n           event.preventDefault();\n       } \n        else{ this.runScript(this.dataEndPoints[this.state.endPointIndex], this.state.selectedValue);\n        event.preventDefault();\n        }\n};\n\n\n render() {\n      const radioLocal = (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                <fieldset>\n                \n                    <div className=\"elf-form-field\" >\n                    <legend>Local Services</legend>\n                    \n                    \n                        <input  \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"CpuInfo\" \n                        id=\"elf-radio-cpu\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-cpu\">Cpu Info</label>\n                        \n                     <input  \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"2\"\n                        value=\"hostname\" \n                        id=\"elf-radio-hostname\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-hostname\">Host Name</label>\n\n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"VersionCheck\" \n                        id=\"elf-radio-version\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-version\">Version Info</label>\n                        \n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"2\"\n                        value=\"uptime\" \n                        id=\"elf-radio-uptime\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-uptime\">uptime</label>\n                        \n                    </div>\n                    \n                    \n                   <div className=\"form-group\">\n                       <button type=\"submit\" className=\"btn btn-primary\">Run System Script </button>\n                   </div>\n                   </fieldset>\n                 </form>\n            </div>\n            );\n return(\n     <div className=\"App\">                                 \n                                        \n            <main>          \n            <section>\n            {radioLocal}\n            </section>\n                     <section>\n                        <pre>{this.state.allData}</pre>\n                    </section>\n          \n                </main>                                       \n        </div>   \n     )\n };\n}\nexport default RadioLocal;\n","import React, { Component } from 'react';\nimport './App.css';\n\n\nclass RadioRemote extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.dataEndPoints = [\n        '/ssh-runner/', \n        '/ssh-runner/call-cpu-info?script=',  \n        '/ssh-runner/get-host-name?script=',\n        '/ssh-runner/uptime?script='\n        ];\n        \n        this.state = {\n            allData:'',\n            selectedValue: '',\n            endPointIndex: 0\n            \n        };\n    }\n\n  Uptime = () => {\n        const that = this;\n        fetch('ssh-runner/run-uptime')\n            .then(function (response) {return response.json();})\n            .then(function (json) {\n                console.log('JSON allData from server:', json.allData);\n                that.setState({allData: json.allData});\n            })\n            .catch(function (ex) {\n                console.log('parsing failed, error on server, URL bad, network down, or similar');\n                console.log(JSON.stringify(ex, null, 4));\n            });\n            \n        };\n\n        \nrunScript = (path, script) => {\n    const that = this;\n    if (!script) {\n        return;\n    }\n    fetch(path + script)\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (json) {\n            console.log('allData', json.allData);\n            console.log('result', json.result);\n            console.log('code', json.code);\n            console.log('error', json.error);\n            let info = '';\n            if (json.result === 'error') {\n                info = json.error;\n            } else if (script === 'CpuInfo') {\n                var regex1 = RegExp('model name.*', 'g');\n                let array1 = regex1.exec(json.allData);\n                while (array1 !== null) {\n                    info += array1[0] + '\\n';\n                    console.log(`Found ${array1[0]}.`);\n                    array1 = regex1.exec(json.allData);\n                }\n            } else { info = json.allData;}\n            that.setState({allData: info});\n        })\n        .catch(function (ex) {\n            console.log('parsing failed, URL bad, network down, or similar', ex);\n        });\n};\n\n\nhandleChange = (event) => {\n    const selectedValue = event.target.value;\n    const endPointIndex = event.target.getAttribute('data-endpoint');\n    console.log('HANDLE CHANGE', selectedValue);\n    this.setState({...this.state, selectedValue: selectedValue, endPointIndex: endPointIndex});\n\n};\n\nhandleSubmit = (event) => {\n    this.setState({allData: ''});\n    console.log('A name was submitted: ', this.state);\n            //uptime console\n    if(this.state.selectedValue === 'uptime1'){\n          console.log('Going to ssh');\n          this.Uptime();\n           event.preventDefault();\n        } \n        else{ this.runScript(this.dataEndPoints[this.state.endPointIndex], this.state.selectedValue);\n        event.preventDefault();\n        }\n};\n\nhandleSubmitRemote = (event) => {\n        this.setState({allData: ''});\n        console.log('A name was submitted: ', this.state);\n        this.Uptime();\n        event.preventDefault();\n};\n\n\n\n render() {\n      const radioRemote = (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                <fieldset>\n                \n                    <div className=\"elf-form-field\" >\n                    <legend>Local Services</legend>\n                    \n                    \n                        <input  \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"runCpuInfo\" \n                        id=\"elf-radio-cpu\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-cpu\">Remote Cpu Info</label>\n                        \n                     <input  \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"hostname\" \n                        id=\"elf-radio-hostname\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-hostname\">Remote Host Name</label>\n\n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"VersionCheck\" \n                        id=\"elf-radio-version\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-version\">Version Info</label>\n                        \n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"3\"\n                        value=\"uptime\" \n                        id=\"elf-radio-uptime\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-uptime\">Remote Uptime</label>\n                        \n                    </div>\n                    \n                    \n                   <div className=\"form-group\">\n                       <button type=\"submit\" className=\"btn btn-primary\">Run System Script </button>\n                   </div>\n                   </fieldset>\n                 </form>\n            </div>\n            );\n return(\n     <div className=\"App\">                                 \n                                        \n            <main>          \n            <section>\n            {radioRemote}\n            </section>\n                     <section>\n                        <pre>{this.state.allData}</pre>\n                    </section>\n          \n                </main>                                       \n        </div>   \n     )\n };\n}\nexport default RadioRemote;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ElfHeader from './ElfHeader';\nimport RadioLocal from './RadioLocal';\nimport RadioRemote from './RadioRemote';\n\n\nclass App extends Component {\n    \n        render() {\n    \n return (                                                  \n        <div className=\"App\">                                 \n            <ElfHeader/>                                     \n            <main>                                            \n                <section>                                     \n                    <RadioLocal/>    \n                    <RadioRemote/>\n                                         \n                </section>         \n            </main>                                           \n        </div>                                                \n    );                                                        \n}        \n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}