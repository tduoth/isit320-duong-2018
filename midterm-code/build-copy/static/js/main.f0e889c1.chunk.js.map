{"version":3,"sources":["ElfHeader.js","App.js","serviceWorker.js","index.js"],"names":["ElfHeader","react_default","a","createElement","className","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryServer","that","assertThisInitialized","fetch","then","response","json","console","log","setState","foo","catch","ex","Uptime","allData","JSON","stringify","runScript","path","script","result","code","error","info","regex1","RegExp","array1","exec","concat","handleChange","event","selectedValue","target","value","endPointIndex","getAttribute","objectSpread","state","handleSubmit","preventDefault","dataEndPoints","handleSubmitRemote","VersionCheck","uptime","State","radioWeb","onSubmit","type","name","data-endpoint","id","onChange","htmlFor","src_ElfHeader","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0e889c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass ElfHeader extends Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <header>\n                    <h1>System Check</h1>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default ElfHeader;","import React, { Component } from 'react';\nimport './App.css';\nimport ElfHeader from './ElfHeader';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.dataEndPoints = [\n        '/script-pusher/run-script?script=', \n        '/script-pusher/run-system-tool?script=',  \n        '/script-pusher/run-uptime-tool?script='];\n        \n        this.state = {\n            allData: 'CPU: unknown',\n            VersionCheck: 'Version: unknown',\n            uptime: 'Uptime: unknown',\n            selectedValue: '',\n            endPointIndex: 0,\n            State: 'waiting for server'\n        };\n    }\n    \n queryServer = () => {\n        const that = this;\n        fetch('/script-pusher/foo')\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('parsed json', json);\n                that.setState(foo => (json));\n            })\n            .catch(function(ex) {\n                console.log('parsing failed, URL bad, network down, or similar', ex);\n            });\n            \n    };\n    \n        Uptime = () => {\n        const that = this;\n        fetch('ssh-runner/run-uptime')\n            .then(function (response) {return response.json();})\n            .then(function (json) {\n                console.log('JSON allData from server:', json.allData);\n                that.setState({allData: json.allData});\n            })\n            .catch(function (ex) {\n                console.log('parsing failed, error on server, URL bad, network down, or similar');\n                console.log(JSON.stringify(ex, null, 4));\n            });\n            \n        };\n    \nrunScript = (path, script) => {\n    const that = this;\n    if (!script) {\n        return;\n    }\n    fetch(path + script)\n        .then(function (response) {\n            return response.json();\n        })\n        .then(function (json) {\n            console.log('allData', json.allData);\n            console.log('result', json.result);\n            console.log('code', json.code);\n            console.log('error', json.error);\n            let info = '';\n            if (json.result === 'error') {\n                info = json.error;\n            } else if (script === 'CpuInfo') {\n                var regex1 = RegExp('model name.*', 'g');\n                let array1 = regex1.exec(json.allData);\n                while (array1 !== null) {\n                    info += array1[0] + '\\n';\n                    console.log(`Found ${array1[0]}.`);\n                    array1 = regex1.exec(json.allData);\n                }\n            } else { info = json.allData;}\n            that.setState({allData: info});\n        })\n        .catch(function (ex) {\n            console.log('parsing failed, URL bad, network down, or similar', ex);\n        });\n};\n\n\nhandleChange = (event) => {\n    const selectedValue = event.target.value;\n    const endPointIndex = event.target.getAttribute('data-endpoint');\n    console.log('HANDLE CHANGE', selectedValue);\n    this.setState({...this.state, selectedValue: selectedValue, endPointIndex: endPointIndex});\n\n};\n\nhandleSubmit = (event) => {\n    this.setState({allData: ''});\n    console.log('A name was submitted: ', this.state);\n            //uptime console\n     if(this.state.selectedValue === 'uptime'){\n            console.log('Going to console');\n            event.preventDefault();\n        } \n        //uptime for remote server\n   if(this.state.selectedValue === 'uptime1'){\n          console.log('Going to ssh');\n          this.Uptime();\n           event.preventDefault();\n       } \n        else{ this.runScript(this.dataEndPoints[this.state.endPointIndex], this.state.selectedValue);\n        event.preventDefault();\n        }\n};\n\nhandleSubmitRemote = (event) => {\n        this.setState({allData: ''});\n        console.log('A name was submitted: ', this.state);\n        this.Uptime();\n        event.preventDefault();\n};\n\n    render() {\n        const radioWeb = (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                <fieldset>\n                \n                    <div className=\"elf-form-field\" >\n                    <legend>Services</legend>\n                    \n                    \n                        <input  \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"CpuInfo\" \n                        id=\"elf-radio-cpu\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-cpu\">CpuInfo</label>\n                        \n                    \n\n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"0\"\n                        value=\"VersionCheck\" \n                        id=\"elf-radio-version\" \n                        onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-version\"> Version Info </label>\n                        \n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"2\"\n                        value=\"uptime\" \n                        id=\"elf-radio-uptime\" \n                        onChange={this.handleChange}/>\n                        \n                        <label htmlFor=\"elf-radio-uptime\">Uptime</label>\n                    </div>\n                    \n                    \n                   <div className=\"form-group\">\n                       <button type=\"submit\" className=\"btn btn-primary\">Run System Script </button>\n                   </div>\n                   </fieldset>\n                <fieldset>\n                    <div className=\"elf-form-field\" >\n                    <legend>Remote Services</legend>\n                    \n                        <input \n                        type=\"radio\" \n                        name=\"app-choice\" \n                        data-endpoint=\"2\"\n                        value=\"uptime1\" \n                        id=\"elf-radio-uptime1\" \n                        onChange={this.handleChange}/>\n                        \n                        <label htmlFor=\"elf-radio-uptime1\">Uptime</label>\n                        \n                        \n                    </div>\n\n                   <div className=\"form-group\">\n                       <button type=\"submit\" className=\"btn btn-primary1\">Run System Script </button>\n                   </div>\n                   </fieldset>\n                 </form>\n            </div>\n            );\n                \n            \n            \n        \n        return (\n            <div className=\"App\">\n            <ElfHeader/>\n                <header className=\"App-header\">\n               </header>\n         <main>\n                    <section>{radioWeb}</section>\n                    <section>\n                        <pre>{this.state.allData}</pre>\n                    </section>\n                    <button onClick={this.queryServer}>Run Foo</button>\n                    <p>{this.state.State}</p>\n                    \n</main>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}